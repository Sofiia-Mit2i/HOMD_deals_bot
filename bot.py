import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from rapidfuzz import process

ADMINS =  [333192979]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É GEO –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    with open("data.json", "r", encoding="utf-8") as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É GEO –≤ —Ñ–∞–π–ª
def save_data(data):
    with open("data.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
GEO_CONTACTS = load_data()

# –ü–æ–∏—Å–∫ GEO (fuzzy search)
def find_geo(user_input: str):
    choices = list(GEO_CONTACTS.keys())
    best_match, score, _ = process.extractOne(user_input.lower(), choices)
    if score > 70:
        return best_match
    return None

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("kz –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data="–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω")],
        [InlineKeyboardButton("üá™üá∏ –ò—Å–ø–∞–Ω–∏—è", callback_data="–∏—Å–ø–∞–Ω–∏—è")],
        [InlineKeyboardButton("üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è", callback_data="–≥–µ—Ä–º–∞–Ω–∏—è")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π GEO –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    geo = query.data
    contacts = GEO_CONTACTS.get(geo, [])
    response = "üìç –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞:\n" + "\n".join(contacts)

    await query.edit_message_text(response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (fuzzy search)
async def geo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if user_input.startswith("/"):
        return

    geo = find_geo(user_input)

    if geo:
        contacts = GEO_CONTACTS[geo]
        response = f"üìç –ü–æ—Ö–æ–∂–µ, —Ç—ã –∏–º–µ–ª –≤ –≤–∏–¥—É *{geo.title()}*:\n" + "\n".join(contacts)
    else:
        response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ GEO. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ."

    await update.message.reply_text(response, parse_mode="Markdown")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–¥–æ–±–∞–≤–∏—Ç—å GEO)
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–¥–æ–±–∞–≤–∏—Ç—å GEO)
async def add_geo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω ‚Üí –æ—Ç–∫–∞–∑
    if user_id not in ADMINS:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /addgeo <–ì–ï–û> <–∫–æ–Ω—Ç–∞–∫—Ç1> <–∫–æ–Ω—Ç–∞–∫—Ç2> ...")
        return

    geo = context.args[0].lower()
    contacts = context.args[1:]

    GEO_CONTACTS[geo] = contacts
    save_data(GEO_CONTACTS)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    await update.message.reply_text(f"‚úÖ GEO '{geo}' –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏: {', '.join(contacts)}")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã
    await update.message.reply_text("üíæ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

def main():
    # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    TOKEN = "8499168190:AAFjzUhHqHK1ZOQQlthMVbmotWIW_yBosLw"

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addgeo", add_geo))  # —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, geo_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
