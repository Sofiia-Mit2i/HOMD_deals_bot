import logging
import os
import asyncio
from datetime import datetime
from itertools import combinations

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram import F

from supabase import create_client
from rapidfuzz import process, fuzz
from dotenv import load_dotenv

from getexcel import send_team_excel, get_team_by_user_id

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()


# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
try:
    supabase = create_client(
        supabase_url=SUPABASE_URL,
        supabase_key=SUPABASE_KEY
    )
    logger.info("Successfully connected to Supabase")
except Exception as e:
    logger.error(f"Failed to connect to Supabase: {str(e)}")
    raise SystemExit(1)

COUNTRY_MAP = {
    "AU": ["AU", "AUSTRALIA", "–ê–í–°–¢–†–ê–õ–ò–Ø", "–ê–í–°–¢–†–ê–õ–Ü–Ø"],
    "AZ": ["AZ", "AZERBAIJAN", "–ê–ó–ï–†–ë–ê–ô–î–ñ–ê–ù"],
    "CA": ["CA", "CANADA", "–ö–ê–ù–ê–î–ê"],
    "CZ": ["CZ", "CZECH REPUBLIC", "–ß–ï–•–ò–Ø", "–ß–ï–•–Ü–Ø"],
    "DE": ["DE", "GERMANY", "–ì–ï–†–ú–ê–ù–ò–Ø", "–ù–Ü–ú–ï–ß–ß–ò–ù–ê"],
    "HU": ["HU", "HUNGARY", "–í–ï–ù–ì–†–ò–Ø", "–£–ì–û–†–©–ò–ù–ê"],
    "NZ": ["NZ", "NEW ZEALAND", "–ù–û–í–ê–Ø –ó–ï–õ–ê–ù–î–ò–Ø", "–ù–û–í–ê –ó–ï–õ–ê–ù–î–Ü–Ø"],
    "SK": ["SK", "SLOVAKIA", "–°–õ–û–í–ê–ö–ò–Ø", "–°–õ–û–í–ê–ß–ß–ò–ù–ê"],
    "US": ["US", "USA", "UNITED STATES", "–°–®–ê"],
    "GB": ["GB", "UNITED KINGDOM", "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–ò–Ø", "–í–ï–õ–ò–ö–ê –ë–†–ò–¢–ê–ù–Ü–Ø"],
    "NL": ["NL", "NETHERLANDS", "–ù–ò–î–ï–†–õ–ê–ù–î–´", "–ù–Ü–î–ï–†–õ–ê–ù–î–ò"],
    "GR": ["GR", "GREECE", "–ì–†–ï–¶–ò–Ø", "–ì–†–ï–¶–Ü–Ø"],
    "AT": ["AT", "AUSTRIA", "–ê–í–°–¢–†–ò–Ø", "–ê–í–°–¢–†–Ü–Ø"],
    "BE": ["BE", "BELGIUM", "–ë–ï–õ–¨–ì–ò–Ø", "–ë–ï–õ–¨–ì–Ü–Ø"],
    "BR": ["BR", "BRAZIL", "–ë–†–ê–ó–ò–õ–ò–Ø", "–ë–†–ê–ó–ò–õ–Ü–Ø"],
    "BG": ["BG", "BULGARIA", "–ë–û–õ–ì–ê–†–ò–Ø", "–ë–û–õ–ì–ê–†–Ü–Ø"],
    "CL": ["CL", "CHILE", "–ß–ò–õ–ò", "–ß–ò–õ–Ü"],
    "DK": ["DK", "DENMARK", "–î–ê–ù–ò–Ø", "–î–ê–ù–Ü–Ø"],
    "EE": ["EE", "ESTONIA", "–≠–°–¢–û–ù–ò–Ø", "–ï–°–¢–û–ù–Ü–Ø"],
    "FI": ["FI", "FINLAND", "–§–ò–ù–õ–Ø–ù–î–ò–Ø", "–§–Ü–ù–õ–Ø–ù–î–Ü–Ø"],
    "FR": ["FR", "FRANCE", "–§–†–ê–ù–¶–ò–Ø", "–§–†–ê–ù–¶–Ü–Ø"],
    "IE": ["IE", "IRELAND", "–ò–†–õ–ê–ù–î–ò–Ø", "–Ü–†–õ–ê–ù–î–Ü–Ø"],
    "IT": ["IT", "ITALY", "–ò–¢–ê–õ–ò–Ø", "–Ü–¢–ê–õ–Ü–Ø"],
    "JP": ["JP", "JAPAN", "–Ø–ü–û–ù–ò–Ø", "–Ø–ü–û–ù–Ü–Ø"],
    "MY": ["MY", "MALAYSIA", "–ú–ê–õ–ê–ô–ó–ò–Ø", "–ú–ê–õ–ê–ô–ó–Ü–Ø"],
    "NO": ["NO", "NORWAY", "–ù–û–†–í–ï–ì–ò–Ø", "–ù–û–†–í–ï–ì–Ü–Ø"],
    "PH": ["PH", "PHILIPPINES", "–§–ò–õ–ò–ü–ü–ò–ù–´", "–§–Ü–õ–Ü–ü–ü–Ü–ù–ò"],
    "PL": ["PL", "POLAND", "–ü–û–õ–¨–®–ê", "–ü–û–õ–¨–©–ê"],
    "PT": ["PT", "PORTUGAL", "–ü–û–†–¢–£–ì–ê–õ–ò–Ø", "–ü–û–†–¢–£–ì–ê–õ–Ü–Ø"],
    "SI": ["SI", "SLOVENIA", "–°–õ–û–í–ï–ù–ò–Ø", "–°–õ–û–í–ï–ù–Ü–Ø"],
    "ES": ["ES", "SPAIN", "–ò–°–ü–ê–ù–ò–Ø", "–Ü–°–ü–ê–ù–Ü–Ø"],
    "CH": ["CH", "SWITZERLAND", "–®–í–ï–ô–¶–ê–†–ò–Ø", "–®–í–ï–ô–¶–ê–†–Ü–Ø"],
    "BD": ["BD", "BANGLADESH", "–ë–ê–ù–ì–õ–ê–î–ï–®"],
    "ZA": ["ZA", "SOUTH AFRICA", "–Æ–ê–†", "–ü–ê–†"],
    "IN": ["IN", "INDIA", "–ò–ù–î–ò–Ø", "–Ü–ù–î–Ü–Ø"],
    "MM": ["MM", "MYANMAR", "–ú–¨–Ø–ù–ú–ê", "–ú'–Ø–ù–ú–ê"],
    "LV": ["LV", "LATVIA", "–õ–ê–¢–í–ò–Ø", "–õ–ê–¢–í–Ü–Ø"],
    "PK": ["PK", "PAKISTAN", "–ü–ê–ö–ò–°–¢–ê–ù"],
    "BA": ["BA", "BOSNIA AND HERZEGOVINA", "–ë–û–°–ù–ò–Ø –ò –ì–ï–†–¶–ï–ì–û–í–ò–ù–ê", "–ë–û–°–ù–Ü–Ø –Ü –ì–ï–†–¶–ï–ì–û–í–ò–ù–ê"],
    "LT": ["LT", "LITHUANIA", "–õ–ò–¢–í–ê"],
    "HR": ["HR", "CROATIA", "–•–û–†–í–ê–¢–ò–Ø", "–•–û–†–í–ê–¢–Ü–Ø"],
    "RO": ["RO", "ROMANIA", "–†–£–ú–´–ù–ò–Ø", "–†–£–ú–£–ù–Ü–Ø"],
    "MX": ["MX", "MEXICO", "–ú–ï–ö–°–ò–ö–ê"],
    "ID": ["ID", "INDONESIA", "–ò–ù–î–û–ù–ï–ó–ò–Ø", "–Ü–ù–î–û–ù–ï–ó–Ü–Ø"],
    "CY": ["CY", "CYPRUS", "–ö–ò–ü–†", "–ö–Ü–ü–†"],
    "UA": ["UA", "UKRAINE", "–£–ö–†–ê–ò–ù–ê", "–£–ö–†–ê–á–ù–ê"],
    "TH": ["TH", "THAILAND", "–¢–ê–ô–õ–ê–ù–î", "–¢–ê–ô–õ–ê–ù–î"],
    "TR": ["TR", "TURKEY", "–¢–£–†–¶–ò–Ø", "–¢–£–†–ï–ß–ß–ò–ù–ê"],
    "NP": ["NP", "NEPAL", "–ù–ï–ü–ê–õ"],
    "ET": ["ET", "ETHIOPIA", "–≠–§–ò–û–ü–ò–Ø", "–ï–§–Ü–û–ü–Ü–Ø"],
    "RU": ["RU", "RUSSIA", "–†–û–°–°–ò–Ø", "–†–û–°–Ü–Ø"],
    "GE": ["GE", "GEORGIA", "–ì–†–£–ó–ò–Ø", "–ì–†–£–ó–Ü–Ø"],
    "RS": ["RS", "SERBIA", "–°–ï–†–ë–ò–Ø", "–°–ï–†–ë–Ü–Ø"],
    "AE": ["AE", "UNITED ARAB EMIRATES", "–û–ê–≠", "–û–ê–ï"],
    "SG": ["SG", "SINGAPORE", "–°–ò–ù–ì–ê–ü–£–†", "–°–Ü–ù–ì–ê–ü–£–†"],
    "PG": ["PG", "PAPUA NEW GUINEA", "–ü–ê–ü–£–ê ‚Äî –ù–û–í–ê–Ø –ì–í–ò–ù–ï–Ø", "–ü–ê–ü–£–ê ‚Äî –ù–û–í–ê –ì–í–Ü–ù–ï–Ø"],
    "IR": ["IR", "IRAN", "–ò–†–ê–ù", "–Ü–†–ê–ù"],
    "AR": ["AR", "ARGENTINA", "–ê–†–ì–ï–ù–¢–ò–ù–ê"],
    "AL": ["AL", "ALBANIA", "–ê–õ–ë–ê–ù–ò–Ø", "–ê–õ–ë–ê–ù–Ü–Ø"],
    "LU": ["LU", "LUXEMBOURG", "–õ–Æ–ö–°–ï–ú–ë–£–†–ì"],
    "MK": ["MK", "NORTH MACEDONIA", "–°–ï–í–ï–†–ù–ê–Ø –ú–ê–ö–ï–î–û–ù–ò–Ø", "–ü–Ü–í–ù–Ü–ß–ù–ê –ú–ê–ö–ï–î–û–ù–Ü–Ø"],
    "SA": ["SA", "SAUDI ARABIA", "–°–ê–£–î–û–í–°–ö–ê–Ø –ê–†–ê–í–ò–Ø", "–°–ê–£–î–Ü–í–°–¨–ö–ê –ê–†–ê–í–Ü–Ø"],
    "NG": ["NG", "NIGERIA", "–ù–ò–ì–ï–†–ò–Ø", "–ù–Ü–ì–ï–†–Ü–Ø"],
    "MT": ["MT", "MALTA", "–ú–ê–õ–¨–¢–ê"],
    "MA": ["MA", "MOROCCO", "–ú–ê–†–û–ö–ö–û"],
    "KW": ["KW", "KUWAIT", "–ö–£–í–ï–ô–¢"],
    "KE": ["KE", "KENYA", "–ö–ï–ù–ò–Ø", "–ö–ï–ù–Ü–Ø"],
    "BN": ["BN", "BRUNEI", "–ë–†–£–ù–ï–ô"],
    "LK": ["LK", "SRI LANKA", "–®–†–ò-–õ–ê–ù–ö–ê", "–®–†–Ü-–õ–ê–ù–ö–ê"],
    "ME": ["ME", "MONTENEGRO", "–ß–ï–†–ù–û–ì–û–†–ò–Ø", "–ß–û–†–ù–û–ì–û–†–Ü–Ø"],
    "IL": ["IL", "ISRAEL", "–ò–ó–†–ê–ò–õ–¨", "–Ü–ó–†–ê–á–õ–¨"],
    "NA": ["NA", "NAMIBIA", "–ù–ê–ú–ò–ë–ò–Ø", "–ù–ê–ú–Ü–ë–Ü–Ø"],
    "AM": ["AM", "ARMENIA", "–ê–†–ú–ï–ù–ò–Ø", "–í–Ü–†–ú–ï–ù–Ü–Ø"],
    "CM": ["CM", "CAMEROON", "–ö–ê–ú–ï–†–£–ù"],
    "TN": ["TN", "TUNISIA", "–¢–£–ù–ò–°", "–¢–£–ù–Ü–°"],
    "KR": ["KR", "SOUTH KOREA", "–Æ–ñ–ù–ê–Ø –ö–û–†–ï–Ø", "–ü–Ü–í–î–ï–ù–ù–ê –ö–û–†–ï–Ø"],
    "VN": ["VN", "VIETNAM", "–í–¨–ï–¢–ù–ê–ú", "–í'–Ñ–¢–ù–ê–ú"],
    "EG": ["EG", "EGYPT", "–ï–ì–ò–ü–ï–¢", "–Ñ–ì–ò–ü–ï–¢"],
    "UG": ["UG", "UGANDA", "–£–ì–ê–ù–î–ê"],
    "MD": ["MD", "MOLDOVA", "–ú–û–õ–î–ê–í–ò–Ø", "–ú–û–õ–î–û–í–ê"],
    "ZM": ["ZM", "ZAMBIA", "–ó–ê–ú–ë–ò–Ø", "–ó–ê–ú–ë–Ü–Ø"],
    "ZW": ["ZW", "ZIMBABWE", "–ó–ò–ú–ë–ê–ë–í–ï", "–ó–Ü–ú–ë–ê–ë–í–ï"],
    "KZ": ["KZ", "KAZAKHSTAN", "–ö–ê–ó–ê–•–°–¢–ê–ù"],
    "UY": ["UY", "URUGUAY", "–£–†–£–ì–í–ê–ô"],
    "IS": ["IS", "ICELAND", "–ò–°–õ–ê–ù–î–ò–Ø", "–Ü–°–õ–ê–ù–î–Ü–Ø"],
    "KH": ["KH", "CAMBODIA", "–ö–ê–ú–ë–û–î–ñ–ê"],
    "LB": ["LB", "LEBANON", "–õ–ò–í–ê–ù", "–õ–Ü–í–ê–ù"],
    "DZ": ["DZ", "ALGERIA", "–ê–õ–ñ–ò–†"],
    "RE": ["RE", "R√âUNION", "–†–ï–Æ–ù–¨–û–ù"],
    "QA": ["QA", "QATAR", "–ö–ê–¢–ê–†"],
    "LA": ["LA", "LAOS", "–õ–ê–û–°"],
    "PR": ["PR", "PUERTO RICO", "–ü–£–≠–†–¢–û-–†–ò–ö–û", "–ü–£–ï–†–¢–û-–†–Ü–ö–û"],
    "HK": ["HK", "HONG KONG", "–ì–û–ù–ö–û–ù–ì"],
    "CO": ["CO", "COLOMBIA", "–ö–û–õ–£–ú–ë–ò–Ø", "–ö–û–õ–£–ú–ë–Ü–Ø"],
    "SY": ["SY", "SYRIA", "–°–ò–†–ò–Ø", "–°–ò–†–Ü–Ø"],
    "XK": ["XK", "KOSOVO", "–ö–û–°–û–í–û"]
}

# -----------------------
# /start
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="Type GEOs Now", callback_data="geo")]
        ]
    )
    await message.answer("üëã Welcome! Please type your GEOs:", reply_markup=keyboard)
# -----------------------
# inline –∫–Ω–æ–ø–∫–∞ ‚Üí –≤—ã–∑—ã–≤–∞–µ—Ç /geo
@dp.callback_query(F.data == "geo")
async def geo_button(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("‚úçÔ∏è Please enter GEOs (e.g. AU, US, IT):")

async def log_user_request(user_id, username, geo_list):
    now = datetime.utcnow().isoformat()
    for geo in geo_list:
        response = supabase.table("geo").select("*").filter("geos", "cs", f'{{{geo}}}').execute()
        for row in response.data:
            team_table = f"{row['team_name'].lower()}_requests"
            supabase.table(team_table).insert({
                "user_id": user_id,
                "username": username,
                "geo": geo,
                "request_date": now
            }).execute()

# -----------------------
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å GEO
def normalize_geo(user_words):
    correct = []
    incorrect = []

    for word in user_words:
        word_clean = word.strip().replace("—ë", "–µ").upper()
        best_match = None
        best_score = 70

        for geo_code, names in COUNTRY_MAP.items():
            score = process.extractOne(word_clean, names, scorer=fuzz.ratio)
            if score and score[1] >= best_score:
                best_match = geo_code
                best_score = score[1]

        if best_match:
            correct.append(best_match)
        else:
            incorrect.append(word)

    return correct, incorrect

@dp.message(lambda message: message.text and not message.text.startswith('/'))
async def handle_geos(message: types.Message):
    text = message.text.strip()
    user_words = text.replace(",", " ").split()

    correct_geos, incorrect_words = normalize_geo(user_words)
    await log_user_request(message.from_user.id, message.from_user.username, correct_geos)

    # 1. –°–ª–æ–≤–∞—Ä—å: GEO -> –∫–æ–º–∞–Ω–¥—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    geo_team_map = {}
    for geo in correct_geos:
        pg_array = "{" + geo + "}"
        response = supabase.table("geo").select("*").filter("geos", "cs", pg_array).execute()
        geo_team_map[geo] = set()
        for row in response.data:
            team_contact = f"{row['team_name']} ‚Äì {row['contact']}"
            geo_team_map[geo].add(team_contact)

    # 2. –ù–∞–π–¥–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ GEO, —á—Ç–æ–±—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    used_teams = set()
    reply_parts = []

    # –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π GEO, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—â–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    for r in range(len(correct_geos), 0, -1):
        for geo_combo in combinations(correct_geos, r):
            # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            combo_teams = set.intersection(*(geo_team_map[geo] for geo in geo_combo))
            # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            combo_teams -= used_teams
            if combo_teams:
                reply_parts.append(f"GEO: {', '.join(geo_combo)} ‚Äì " + ", ".join(combo_teams))
                used_teams.update(combo_teams)

    # 3. –î–æ–±–∞–≤–∏–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ GEO
    for word in incorrect_words:
        reply_parts.append(f"‚ùå No managers found for {word}")

    reply_text = "\n".join(reply_parts)
    if correct_geos:
        footer = "\n\n‚úÖ Next steps\n" \
                " ‚Ä¢ Please message each contact separately (so nothing gets missed).\n" \
                " ‚Ä¢ They'll help with the best deals for your GEOs as soon as possible.\n" \
                " ‚Ä¢ If anything looks off or a link doesn't work, ping @racketwoman.\n" \
                "Great to (e-)meet you‚Äîhave a fantastic day! üôå"
        reply_text += footer

    await message.reply(reply_text)

    # ----------------------- Startup -----------------------
# Replace the main() function at the bottom of the file with:

@dp.message(Command("download"))
async def handle_download(message: types.Message):
    try:
        logger.info(f"Download requested by user {message.from_user.id}")
        await send_team_excel(message, supabase)
    except Exception as e:
        logger.error(f"Error handling download: {str(e)}")
        await message.reply("‚ùå An error occurred while processing your request.")
    
async def main():
    # Initialize Bot instance with a default parse mode
    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher()
    
    # Register all handlers
    dp.message.register(cmd_start, Command(commands=["start"]))
    dp.callback_query.register(geo_button, F.data == "geo")
    dp.message.register(handle_geos, lambda message: message.text and not message.text.startswith('/'))
    dp.message.register(handle_download, Command("download"))

    # Start polling
    logger.info("ü§ñ Bot started...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())