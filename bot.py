import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from rapidfuzz import process

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATA_FILE = "data.json"

# –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
MAIN_GEO = ["–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–∏—Å–ø–∞–Ω–∏—è", "–≥–µ—Ä–º–∞–Ω–∏—è", "—Ñ—Ä–∞–Ω—Ü–∏—è"]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    if not os.path.exists(DATA_FILE):
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        default_data = {
            "admins": [39],
            "geo": {
                "–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω": ["@manager_kz1", "@manager_kz2"],
                "–∏—Å–ø–∞–Ω–∏—è": ["@manager_es1", "@manager_es2"],
                "–≥–µ—Ä–º–∞–Ω–∏—è": ["@manager_de1"],
                "–∏—Ç–∞–ª–∏—è": ["@itmanger"],
                "—Ñ—Ä–∞–Ω—Ü–∏—è": ["@francemanger"],
                "–∞–º–µ—Ä–∏–∫–∞": ["@usman"],
                "–ø–æ–ª—å—à–∞": ["@plmanager"]
            }
        }
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(default_data, f, ensure_ascii=False, indent=2)
        return default_data
    
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = load_data()
ADMINS = data["admins"]
GEO_CONTACTS = data["geo"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_keyboard(user_id=None):
    keyboard = []
    row = []
    
    for i, geo in enumerate(MAIN_GEO):
        if geo not in GEO_CONTACTS:
            continue
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
        flags = {
            "–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω": "üá∞üáø",
            "–∏—Å–ø–∞–Ω–∏—è": "üá™üá∏", 
            "–≥–µ—Ä–º–∞–Ω–∏—è": "üá©üá™",
            "—Ñ—Ä–∞–Ω—Ü–∏—è": "üá´üá∑"
        }
        
        flag = flags.get(geo, "üìç")
        button_text = f"{flag} {geo.title()}"
        
        row.append(InlineKeyboardButton(button_text, callback_data=geo))
        
        # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
    if row:
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if user_id and is_admin(user_id):
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    return keyboard

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id in ADMINS

# –ü–æ–∏—Å–∫ GEO (fuzzy search)
def find_geo(user_input: str):
    choices = list(GEO_CONTACTS.keys())
    if not choices:
        return None
        
    best_match, score, _ = process.extractOne(user_input.lower(), choices)
    if score > 70:
        return best_match
    return None

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = create_main_keyboard(update.effective_user.id)
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π GEO –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –Ω–∏–∂–µ:\n"
        "–î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∏—Ç–∞–ª–∏—è', '–∞–º–µ—Ä–∏–∫–∞', '–ø–æ–ª—å—à–∞')",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if data == "admin_panel":
        if not is_admin(query.from_user.id):
            await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
            
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å GEO", callback_data="add_geo")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å GEO", callback_data="edit_geo_menu")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å GEO", callback_data="delete_geo_menu")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
        return
    
    # –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GEO
    if data == "edit_geo_menu":
        keyboard = []
        for geo in GEO_CONTACTS.keys():
            keyboard.append([InlineKeyboardButton(geo.title(), callback_data=f"edit_{geo}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ GEO –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
        return
    
    # –ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è GEO
    if data == "delete_geo_menu":
        keyboard = []
        for geo in GEO_CONTACTS.keys():
            keyboard.append([InlineKeyboardButton(geo.title(), callback_data=f"delete_{geo}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ GEO –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è GEO
    if data.startswith("delete_"):
        geo = data.replace("delete_", "")
        
        if geo in GEO_CONTACTS:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞
            contacts = GEO_CONTACTS[geo]
            
            # –£–¥–∞–ª—è–µ–º GEO
            del GEO_CONTACTS[geo]
            save_data({"admins": ADMINS, "geo": GEO_CONTACTS})
            
            await query.edit_message_text(
                f"‚úÖ GEO '{geo}' —É–¥–∞–ª–µ–Ω–æ.\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {', '.join(contacts)}"
            )
        else:
            await query.edit_message_text(f"‚ùå GEO '{geo}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GEO
    if data.startswith("edit_"):
        geo = data.replace("edit_", "")
        
        if geo in GEO_CONTACTS:
            context.user_data["editing_geo"] = geo
            await query.edit_message_text(
                f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GEO '{geo}':\n"
                f"–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {', '.join(GEO_CONTACTS[geo])}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"@contact1 @contact2 @contact3"
            )
        else:
            await query.edit_message_text(f"‚ùå GEO '{geo}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ GEO
    if data == "add_geo":
        context.user_data["adding_geo"] = True
        await query.edit_message_text(
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ GEO:\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ GEO –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ format:\n"
            "–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥–µ–æ @contact1 @contact2"
        )
        return
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    if data == "back_to_main":
        keyboard = create_main_keyboard(query.from_user.id)
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üëã –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã:",
            reply_markup=reply_markup
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ GEO
    if data in GEO_CONTACTS:
        contacts = GEO_CONTACTS.get(data, [])
        response = f"üìç –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è {data.title()}:\n" + "\n".join(contacts)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(response, reply_markup=reply_markup)
    else:
        await query.edit_message_text("‚ùå GEO –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (fuzzy search)
async def geo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if user_input.startswith("/"):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GEO
    if context.user_data.get("adding_geo"):
        parts = user_input.split()
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥–µ–æ @contact1 @contact2")
            return
            
        geo = parts[0].lower()
        contacts = parts[1:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å @
        for contact in contacts:
            if not contact.startswith("@"):
                await update.message.reply_text("‚ùå –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
                return
        
        GEO_CONTACTS[geo] = contacts
        save_data({"admins": ADMINS, "geo": GEO_CONTACTS})
        
        del context.user_data["adding_geo"]
        await update.message.reply_text(
            f"‚úÖ GEO '{geo}' –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏: {', '.join(contacts)}\n"
            f"üíæ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í—Å–µ–≥–æ GEO: {len(GEO_CONTACTS)}"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GEO
    if context.user_data.get("editing_geo"):
        geo = context.user_data["editing_geo"]
        contacts = user_input.split()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å @
        for contact in contacts:
            if not contact.startswith("@"):
                await update.message.reply_text("‚ùå –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
                return
        
        GEO_CONTACTS[geo] = contacts
        save_data({"admins": ADMINS, "geo": GEO_CONTACTS})
        
        del context.user_data["editing_geo"]
        await update.message.reply_text(
            f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è GEO '{geo}' –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(contacts)}"
        )
        return

    # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ GEO
    geo = find_geo(user_input)

    if geo:
        contacts = GEO_CONTACTS[geo]
        response = f"üìç –ü–æ—Ö–æ–∂–µ, —Ç—ã –∏–º–µ–ª –≤ –≤–∏–¥—É *{geo.title()}*:\n" + "\n".join(contacts)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(response, parse_mode="Markdown", reply_markup=reply_markup)
    else:
        response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ GEO. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏ –∑–∞–ø—Ä–æ—Å."
        await update.message.reply_text(response)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–¥–æ–±–∞–≤–∏—Ç—å GEO)
async def add_geo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /addgeo <–ì–ï–û> <–∫–æ–Ω—Ç–∞–∫—Ç1> <–∫–æ–Ω—Ç–∞–∫—Ç2> ...")
        return

    geo = context.args[0].lower()
    contacts = context.args[1:]

    GEO_CONTACTS[geo] = contacts
    save_data({"admins": ADMINS, "geo": GEO_CONTACTS})

    await update.message.reply_text(
        f"‚úÖ GEO '{geo}' –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏: {', '.join(contacts)}\n"
        f"üíæ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í—Å–µ–≥–æ GEO: {len(GEO_CONTACTS)}"
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (—É–¥–∞–ª–∏—Ç—å GEO)
async def remove_geo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /removegeo <–ì–ï–û>")
        return

    geo = context.args[0].lower()
    
    if geo in GEO_CONTACTS:
        contacts = GEO_CONTACTS[geo]
        del GEO_CONTACTS[geo]
        save_data({"admins": ADMINS, "geo": GEO_CONTACTS})
        await update.message.reply_text(
            f"‚úÖ GEO '{geo}' —É–¥–∞–ª–µ–Ω–æ.\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {', '.join(contacts)}"
        )
    else:
        await update.message.reply_text(f"‚ùå GEO '{geo}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö GEO)
async def list_geo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not GEO_CONTACTS:
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ GEO –ø—É—Å—Ç–∞.")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ GEO
    main_geo = []
    other_geo = []
    
    for geo in GEO_CONTACTS.keys():
        if geo in MAIN_GEO:
            main_geo.append(geo)
        else:
            other_geo.append(geo)
    
    response = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö GEO:\n\n"
    response += "üåü –û—Å–Ω–æ–≤–Ω—ã–µ GEO (–Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö):\n"
    for geo in main_geo:
        contacts = GEO_CONTACTS[geo]
        response += f"‚Ä¢ {geo.title()}: {', '.join(contacts)}\n"
    
    response += "\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ GEO (—á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫):\n"
    for geo in other_geo:
        contacts = GEO_CONTACTS[geo]
        response += f"‚Ä¢ {geo.title()}: {', '.join(contacts)}\n"

    await update.message.reply_text(response)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã GEO)
async def edit_geo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /editgeo <–ì–ï–û> <–Ω–æ–≤—ã–π_–∫–æ–Ω—Ç–∞–∫—Ç1> <–Ω–æ–≤—ã–π_–∫–æ–Ω—Ç–∞–∫—Ç2> ...")
        return

    geo = context.args[0].lower()
    
    if geo not in GEO_CONTACTS:
        await update.message.reply_text(f"‚ùå GEO '{geo}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    contacts = context.args[1:]
    GEO_CONTACTS[geo] = contacts
    save_data({"admins": ADMINS, "geo": GEO_CONTACTS})

    await update.message.reply_text(
        f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è GEO '{geo}' –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(contacts)}"
    )

def main():
    # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    TOKEN = "8358530594:AAEXLL2IyEInhs7ruykTrtgxClcR0WhzkMw"
    
    app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addgeo", add_geo))
    app.add_handler(CommandHandler("removegeo", remove_geo))
    app.add_handler(CommandHandler("listgeo", list_geo))
    app.add_handler(CommandHandler("editgeo", edit_geo))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, geo_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()