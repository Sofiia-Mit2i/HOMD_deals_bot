from io import BytesIO
import pandas as pd
import logging
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from admin import is_admin  # —Ç–≤–æ—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–æ–≤

logger = logging.getLogger(__name__)

# —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ (–∏—Ö –∏–º–µ–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å team_name –≤ geo)
TEAMS = ["Team1", "Team2", "Team3", "Team4", "Team5", "Team6", "Team7"]

async def send_team_excel(message: types.Message, supabase):
    """
    Admin-only command to download request tables.
    Usage:
      /download Team1 Team2 ...
      /download all
    """
    try:
        user_id = message.from_user.id
        if not await is_admin(user_id):
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        parts = message.text.split()
        if len(parts) == 1:
            # –ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏ –∫–Ω–æ–ø–∫—É "all"
            kb = InlineKeyboardBuilder()
            kb.button(text="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ", callback_data="download_all")
            await message.reply(
                "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "`/download Team1 Team2 ...`\n"
                "–∏–ª–∏ `/download all` —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã.",
                parse_mode="Markdown",
                reply_markup=kb.as_markup()
            )
            return

        targets = parts[1:]
        tables = []

        if "all" in [t.lower() for t in targets]:
            tables = [f"{team.lower()}_requests" for team in TEAMS]
        else:
            tables = [f"{team.lower()}_requests" for team in targets if team in TEAMS]

        if not tables:
            await message.reply("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.")
            return

        for table_name in tables:
            try:
                response = supabase.table(table_name)\
                    .select("*")\
                    .order("request_date", desc=True)\
                    .execute()
                
                if not response.data:
                    await message.reply(f"üìä –í —Ç–∞–±–ª–∏—Ü–µ {table_name} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
                    continue

                # DataFrame ‚Üí Excel
                df = pd.DataFrame(response.data)
                for col in df.columns:
                    df[col] = df[col].astype(str)

                buffer = BytesIO()
                df.to_excel(buffer, index=False, engine="openpyxl")
                buffer.seek(0)

                file = types.BufferedInputFile(
                    buffer.getvalue(),
                    filename=f"{table_name}.xlsx"
                )

                await message.reply_document(
                    document=file,
                    caption=f"üìä –î–∞–Ω–Ω—ã–µ –∏–∑ {table_name}"
                )
                logger.info(f"‚úÖ Sent {table_name} to admin {user_id}")

            except Exception as table_err:
                logger.error(f"Error exporting {table_name}: {str(table_err)}")
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ {table_name}")

    except Exception as e:
        logger.error(f"Error in send_team_excel: {str(e)}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
